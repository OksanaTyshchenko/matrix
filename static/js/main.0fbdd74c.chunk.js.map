{"version":3,"sources":["store/index.ts","Form/Form.tsx","Matrix/Matrix.tsx","App.tsx","index.tsx"],"names":["UPDATE_XARR","ADD_XARR","DELETE_ROW","ADD_ROW","actions","xArr","type","rowIndex","colIndex","row","selectors","state","initialState","store","createStore","action","obj","amount","filter","arr","index","composeWithDevTools","Form","useState","rows","setRows","columns","setColumns","dispatch","useDispatch","onSubmit","event","preventDefault","createdXArr","Array","from","length","id","uuidv4","Math","ceil","random","className","htmlFor","min","max","value","onChange","target","Matrix","useSelector","selectedCell","setSelectedCell","selectedRow","setSelectedRow","avg","_","round","reduce","acc","el","calculateSum","sum","num","calculatePart","toFixed","handleHoverCell","cell","handleHoverSum","map","onClick","onMouseOver","onFocus","onMouseLeave","classNames","Matrix__relatedButton","Matrix__selectedButton","Matrix__buttonPercent","style","height","newRow","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0fbdd74c.chunk.js","sourcesContent":["import { legacy_createStore as createStore, AnyAction } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { X } from '../types';\n\nconst UPDATE_XARR = 'UPDATE_XARR';\nconst ADD_XARR = 'ADD_XARR';\nconst DELETE_ROW = 'DELETE_ROW';\nconst ADD_ROW = 'ADD_ROW';\n\nexport const actions = {\n  addXArr: (xArr: X[][]) => ({\n    type: ADD_XARR,\n    xArr,\n  }),\n  updateXArr: (rowIndex: number, colIndex: number) => ({\n    type: UPDATE_XARR,\n    rowIndex,\n    colIndex,\n  }),\n  deleteRow: (rowIndex: number) => ({\n    type: DELETE_ROW,\n    rowIndex,\n  }),\n  addRow: (row: X[]) => ({\n    type: ADD_ROW,\n    row,\n  }),\n};\n\nexport const selectors = {\n  getXArr: (state: RootState) => state.xArr,\n};\n\ntype RootState = {\n  xArr: X[][];\n};\n\nconst initialState: RootState = {\n  xArr: [],\n};\n\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case ADD_XARR: {\n      return {\n        ...state,\n        xArr: action.xArr,\n      };\n    }\n\n    case UPDATE_XARR: {\n      const obj = { ...state.xArr[action.rowIndex][action.colIndex] };\n\n      obj.amount += 1;\n      const xArr = [...state.xArr];\n\n      xArr[action.rowIndex][action.colIndex] = obj;\n\n      return {\n        ...state,\n        xArr,\n      };\n    }\n\n    case DELETE_ROW: {\n      return {\n        ...state,\n        xArr: state.xArr.filter((arr, index) => index !== action.rowIndex),\n      };\n    }\n\n    case ADD_ROW: {\n      return {\n        ...state,\n        xArr: [...state.xArr, action.row],\n      };\n    }\n\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(rootReducer, composeWithDevTools());\n\nexport default store;\n","import React, { SyntheticEvent, useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { v4 as uuidv4 } from 'uuid';\nimport './Form.scss';\nimport { actions } from '../store';\n\nexport const Form = () => {\n  const [rows, setRows] = useState<number>(0);\n  const [columns, setColumns] = useState<number>(0);\n  const dispatch = useDispatch();\n\n  const handleSubmit = (event: SyntheticEvent) => {\n    event.preventDefault();\n\n    const createdXArr = Array.from({ length: rows },\n      () => Array.from({ length: columns }, () => ({\n        id: uuidv4(),\n        amount: Math.ceil(Math.random() * 1000),\n      })));\n\n    dispatch(actions.addXArr(createdXArr));\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"box Form\">\n      <label htmlFor=\"rows\" className=\"label\">\n        Count rows:\n        <input\n          type=\"number\"\n          min={0}\n          max={100}\n          id=\"rows\"\n          value={rows}\n          onChange={(event) => setRows(+event.target.value)}\n          className=\"Form__input\"\n        />\n      </label>\n\n      <label htmlFor=\"columns\" className=\"label\">\n        Count columns:\n        <input\n          type=\"number\"\n          min={0}\n          max={100}\n          id=\"columns\"\n          value={columns}\n          onChange={(event) => setColumns(+event.target.value)}\n          className=\"Form__input\"\n        />\n      </label>\n\n      <button type=\"submit\" className=\"button is-info Form__button\">\n        Create matrix\n      </button>\n    </form>\n  );\n};\n","import React, { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport classNames from 'classnames';\nimport { v4 as uuidv4 } from 'uuid';\nimport './Matrix.scss';\nimport { actions, selectors } from '../store';\nimport { X } from '../types';\n\nexport const Matrix = () => {\n  const xArr = useSelector(selectors.getXArr);\n  const [selectedCell, setSelectedCell] = useState<null | X>(null);\n  const [selectedRow, setSelectedRow] = useState<null | number>(null);\n  const dispatch = useDispatch();\n\n  const avg = Array.from({ length: xArr[0]?.length }, (_: undefined, index: number) => {\n    return Math.round(xArr.reduce((acc, el) => {\n      return acc + el[index].amount;\n    }, 0) / xArr.length);\n  });\n\n  const calculateSum = (arr: X[]) => {\n    return arr.reduce((sum, num) => sum + num.amount, 0);\n  };\n\n  const calculatePart = (amount: number, row: X[]) => {\n    return ((amount / calculateSum(row)) * 100).toFixed(1);\n  };\n\n  const handleHoverCell = (cell: X) => {\n    setSelectedCell(cell);\n    setSelectedRow(null);\n  };\n\n  const handleHoverSum = (rowIndex: number) => {\n    setSelectedRow(rowIndex);\n    setSelectedCell(null);\n  };\n\n  const addRow = () => {\n    const newRow = Array.from({ length: xArr[0]?.length }, () => ({\n      id: uuidv4(),\n      amount: Math.ceil(Math.random() * 1000),\n    }));\n\n    dispatch(actions.addRow(newRow));\n  };\n\n  return (\n    <div className=\"wrapper\">\n      <table className=\"Matrix\">\n        <tbody>\n          {xArr.map((row, rowIndex) => (\n            <tr key={uuidv4()}>\n              <td>\n                <button\n                  type=\"button\"\n                  onClick={() => dispatch(actions.deleteRow(rowIndex))}\n                  className=\"Matrix__button Matrix__delete\"\n                >\n                  ðŸ—‘\n                </button>\n              </td>\n              {row.map((cell, colIndex) => (\n                <td key={cell.id}>\n                  <button\n                    type=\"button\"\n                    onClick={() => {\n                      dispatch(actions.updateXArr(rowIndex, colIndex));\n                    }}\n                    onMouseOver={() => handleHoverCell(cell)}\n                    onFocus={() => handleHoverCell(cell)}\n                    onMouseLeave={() => setSelectedCell(null)}\n                    className={classNames('Matrix__button', {\n                      Matrix__relatedButton: selectedCell && cell.id !== selectedCell.id\n                      && ((selectedCell.amount - cell.amount <= 100\n                        && selectedCell.amount - cell.amount >= 0)\n                        || (cell.amount - selectedCell.amount <= 100\n                        && cell.amount - selectedCell.amount >= 0)),\n                      Matrix__selectedButton: cell.id === selectedCell?.id,\n                      Matrix__buttonPercent: selectedRow === rowIndex,\n                    })}\n                  >\n                    {selectedRow === rowIndex ? (\n                      <>\n                        <span>{`${calculatePart(cell.amount, row)}%`}</span>\n                        <div style={{ height: `${calculatePart(cell.amount, row)}%` }} className=\"Matrix__part\">{}</div>\n                      </>\n                    ) : (<span>{cell.amount}</span>)}\n                  </button>\n                </td>\n              ))}\n              <td\n                className=\"Matrix__selected Matrix__sum\"\n                onFocus={() => handleHoverSum(rowIndex)}\n                onMouseOver={() => handleHoverSum(rowIndex)}\n                onMouseLeave={() => setSelectedRow(null)}\n              >\n                {calculateSum(row)}\n              </td>\n            </tr>\n          ))}\n          <tr>\n            {xArr.length > 0 && <td></td>}\n            {avg.map(value => (\n              <td key={uuidv4()} className=\"Matrix__selected\">{value}</td>))}\n            {xArr.length > 0 && <td className=\"Matrix__selected\">avg/sum</td>}\n          </tr>\n        </tbody>\n      </table>\n      {xArr.length > 0\n      && <button type=\"button\" className=\"button is-info\" onClick={addRow}>Add row</button>}\n    </div>\n  );\n};\n","import React from 'react';\nimport { Form } from './Form/Form';\nimport { Matrix } from './Matrix/Matrix';\nimport './App.scss';\n\nexport const App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <Form />\n      <Matrix />\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.scss';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\nimport store from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}